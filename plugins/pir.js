let resources = require('../resources/model');let fs = require('fs');let path = require('path');let ledplugin = require('../plugins/leds');let sensor;let pirModel = resources.pi.sensors.PIR;let alertLEDModel = resources.pi.actuators.leds["4"];const ALERT_IS_ENABLED = 'alert is enabled and someone is here. led alert cant off ';const NOBODY_IS_HERE = 'nobody is here';const SOMEBODY_IS_HERE = 'someone is here';let observe = function (model) {    return new Proxy(model, {        set: function (target, key, value) {            try {                switch (key) {                    case 'lock':                        pirModel.lock = value;                        ledplugin.switching(alertLEDModel, false);                        if (value === true) {                            console.log('\x1b[93m%s\x1b[0m' , 'security is ON now');                        } else {                            console.log('\x1b[36m%s\x1b[0m' , 'security is OFF now');                        }                        break;                    case 'value':                        pirModel.value = value;                        if (target.lock === true) {                            console.log('\x1b[34m%s\x1b[0m' , 'security is ON'   );                            if (alertLEDModel.value === false) {                                switch (value) {                                    case false :                                        console.log('\x1b[37m%s\x1b[0m', NOBODY_IS_HERE);                                        logToFile(NOBODY_IS_HERE);                                        break;                                    case true:                                        ledplugin.switching(alertLEDModel, true);                                        console.log('\x1b[91m%s\x1b[0m', 'someone is here');                                        logToFile(SOMEBODY_IS_HERE);                                        break;                                }                            } else {                                console.log('\x1b[93m%s\x1b[0m', ALERT_IS_ENABLED);                                logToFile(ALERT_IS_ENABLED);                            }                        } else {                            console.log('\x1b[36m%s\x1b[0m' ,'security is OFF' );                        }                        break;                }                Reflect.set(target, key, value);            } catch (err) {                console.log(err)            }        }    });};let proxy_model = observe(pirModel);exports.proxy_model_pir = () => {    return proxy_model;};exports.start = function () {    connectHardware();};function connectHardware() {    var Gpio = require('onoff').Gpio;    sensor = new Gpio(pirModel.gpio, 'in', 'both');    sensor.watch(function (err, value) {        if (err) {            exit(err);        }        pirModel.status = true;        proxy_model.value = !!value;    });    console.info('Hardware %s sensor started!', resources.pi.sensors.PIR.name);}function logToFile(mode) {    let d = new Date();    let log = d + ': ' + mode + '\n';    fs.appendFile(path.join(__dirname, '../log', 'security_LOG.txt'), log, function (err) {        if (err) throw err    });    //console.log(log)}